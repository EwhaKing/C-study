Discussion Questions

1. Why should a game programmer use the STL?
- Standard Template Library는 게임 프로그래머가 노력과 시간을 절약할 수 있는 이유이다. 널리 사용되는 컨테이너 유형과 알고리즘을 제공하여 코드 작성과 유지 관리를 단순화한다. 이러한 컨테이너 및 알고리즘은 이미 검증되고 최적화되어 있으며, 다양한 프로그래밍 작업에 사용할 수 있다. 따라서 STL을 사용하면 개발자가 직접 구현할 필요 없이 표준화된 구성요소를 활용하여 빠르고 안정적인 코드를 작성할 수 있다.

2. What are the advantages of a vector over an array?
- 크기의 동적 조절 : 배열과 달리 실행 중에 요소를 추가하거나 제거할 수 있다.
- 메모리 관리 :  벡터는 요소가 추가되거나 제거될 때 자동으로 메모리를 재할당하고 관리한다.
- 반복자 지원 : 이터레이터를 통해 요소에 접근할 수 있다. 범위 기반 루프와 같은 반복 작업을 훨씬 간편하게 만든다.
- 알고리즘과의 통합 :  STL 알고리즘과의 통합이 용이하다. 벡터는 STL 컨테이너이므로 STL 알고리즘과 함께 사용할 수 있다.

3. What types of game objects might you store with a vector?
- 플레이어 캐릭터나, 적 캐릭터
- 아이템이나 강화템
- 장애물 및 지형

4. How do performance characteristics of a container type affect the decision to use it?
- 속도 : 컨테이너의 삽입, 삭제, 검색 및 반복 속도는 알고리즘과 자료 구조에 따라 다르다. 특정 작업에 빠르고 효율적이지만 다른 작업에는 느릴 수 있다. 따라서 프로그램의 성능 요구 사항에 맞는 가장 효율적인 컨테이너를 선택해야 한다.
- 메모리 사용량 :  컨테이너는 메모리를 다르게 사용한다.
- 데이터 구조 : 컨테이너의 내부 데이터 구조는 작업을 수행하는 데 중요하다. 작업의 종류와 크기에 따라 가장 적합한 데이터 구조를 선택해야 한다.
- 알고리즘 호환성 :  특정 알고리즘이나 작업에는 특정 컨테이너 타입이 필요할 수 있다.

5. Why is program planning important?
- 구조화된 개발 : 전체적인 구조를 파악하고 개발을 구조화할 수 있다. 프로그램의 각 부분이 어떻게 상호작용하고 연결되는 지를 이해하는 데 도움이 된다.
- 문제 해결 : 계획을 세우면 문제를 분석하고 해결할 수 있는 체계적인 방법을 개발할 수 있다.
- 시간과 비용 절감 : 개발 과정에서 발생할 수 있는 문제를 미리 파악하고 예방할 수 있다. 프로젝트의 시간과 비용을 절약하는 데 도움이 된다.
- 의사 소통 : 계획은 팀 간의 의사소통을 촉진한다. 각 구성원이 프로그램의 목표와 요구사항을 이해하고 역할 및 책임을 명확하게 알 수 있다.
